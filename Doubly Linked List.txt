	void removeFirst()
	{
		if (count == 0)
			cout << "Empty List" << endl;
		else if (count == 1)//first == last
		{
			delete first;
			last = first = NULL;
		}
		else
		{
			Node* current = first;
			first = first->next;
			first->prev = NULL;
			delete current;
		
		}
		count--;
	}

	void deleteNthNode(int pos)
	{
		if (pos < 0 || pos >= count) {
			cout << "Out Of Range" << endl;
			return;
		}
		else if (pos == 0)
		{
			removeFirst();
		}
		else if (pos == count - 1)
		{
			removeLast();
		}
		else {
			Node *current = first->next;


			for (int i = 1; i < pos; i++)
			{
				current = current->next;
			}
			current->prev->next = current->next;
			current->next->prev = current->prev;
			delete current;
		}
		count--;
	}
	void removeLast()
	{
		if (count == 0)
			cout << "Empty List" << endl;
		else if (count == 1)
		{
			delete first;
			//		delete last;
			last = first = NULL;
			count--;
		}
		else
		{
			Node *current = last;
			last = last->prev;
			last->next = NULL;
			delete current;
			count--;
		}
	}



	void remove(int item)
	{
		if (isEmpty())
		{
			cout << "Empty List Can't Remove ";
			return;
		}
		Node*current = first->next;

		if (first->item == item)//delete the first element, special case
		{
			/*
			first = current->next;
			if (first != NULL)
				first->prev = NULL;
			delete current;
			return;
			*/
			removeFirst();
			return;
		}
		else
		{
			

			while (current != NULL)//current->item!=element
			{
				if (current->item == item)
					break;
				current = current->next;
			}

			if (current == NULL) {
				cout << "The item is not there\n";
				return;
			}
			else if (current->next == NULL) {
				removeLast();
				return;
			}

			else
			{
				current->prev->next = current->next;
				//if (current->next != NULL)
				current->next->prev = current->prev;
				delete current;
				count--;
			}

		}


	}
